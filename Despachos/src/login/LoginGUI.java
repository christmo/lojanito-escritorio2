/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * LoginGUI.java
 *
 * Created on 02/08/2010, 05:57:26 PM
 */
package login;

import BaseDatos.ConexionBase;
import configuracion.UIConfiguracion;
import interfaz.Principal;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Properties;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.UIManager;

/**
 *
 * @author christmo
 */
public class LoginGUI extends javax.swing.JFrame {

    private String strUser = null;
    private char[] chrPass = null;
    private String strPass = "";
    ConexionBase cb = null;
    ResultSet rs = null;
    private Properties arcConfig;
    private String url_config = CargarRutaArchivoPropiedades();

    /** Creates new form LoginGUI */
    public LoginGUI() {
        initComponents();
        this.setIconImage(new ImageIcon(getClass().getResource("/interfaz/iconos/kradac_icono.png")).getImage());
        jbtIngresar.setText("<html><center>INGRESAR</center></html>");
        jbtIngresar.setVerticalTextPosition(SwingConstants.BOTTOM);
        jbtIngresar.setHorizontalTextPosition(SwingConstants.CENTER);
        try {
            arcConfig = new Properties();
            arcConfig.load(new FileInputStream(url_config));
            System.out.println("Cargado: " + url_config);
        } catch (IOException ex) {
            //Logger.getLogger(LoginGUI.class.getName()).log(Level.SEVERE, null, ex);
            UIConfiguracion.CrearArchivoPropiedades(url_config);
        }
        existenDirectorios();
        //System.out.println(System.getProperty("java.library.path"));
    }

    public LoginGUI(Properties arcConfig) {
        initComponents();
        this.setIconImage(new ImageIcon(getClass().getResource("/interfaz/iconos/kradac_icono.png")).getImage());
        jbtIngresar.setText("<html><center>INGRESAR</center></html>");
        jbtIngresar.setVerticalTextPosition(SwingConstants.BOTTOM);
        jbtIngresar.setHorizontalTextPosition(SwingConstants.CENTER);
        this.arcConfig = arcConfig;
    }

    /**
     * Hace el cargado del archivo de propiedades en el direcctorio temporal
     * del sistema
     * @return String
     */
    private String CargarRutaArchivoPropiedades() {
        if (System.getProperty("os.name").equals("Linux")) {
            System.out.println("Sistema Operativo: " + System.getProperty("os.name"));
            return System.getProperty("java.io.tmpdir") + System.getProperty("file.separator") + "configsystem.properties";
        } else {
            System.out.println("Sistema Operativo: " + System.getProperty("os.name"));
            return System.getProperty("java.io.tmpdir") + "configsystem.properties";
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jtUser = new javax.swing.JTextField();
        jpPass = new javax.swing.JPasswordField();
        jbtIngresar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ingreso al Sistema...");
        setAlwaysOnTop(true);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        jLabel1.setText("Usuario:");

        jLabel2.setText("Clave:");

        jtUser.setText("kradac");
        jtUser.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jtUserKeyPressed(evt);
            }
        });

        jpPass.setText("kradac");
        jpPass.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jpPassFocusGained(evt);
            }
        });
        jpPass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jpPassKeyPressed(evt);
            }
        });

        jbtIngresar.setText("Ingresar");
        jbtIngresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtIngresarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jbtIngresar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpPass, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtUser, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jpPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jbtIngresar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/interfaz/iconos/kradac.jpg"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        java.awt.Dimension dialogSize = getSize();
        setLocation((screenSize.width-dialogSize.width)/2,(screenSize.height-dialogSize.height)/2);
    }// </editor-fold>//GEN-END:initComponents

    private void jbtIngresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtIngresarActionPerformed
        ingresar();
    }//GEN-LAST:event_jbtIngresarActionPerformed

    /**
     * Ingreso al sistema
     */
    private void ingresar() {
        strUser = null;
        chrPass = null;
        strPass = "";
        boolean entrar = false;


        strUser = jtUser.getText();
        chrPass = jpPass.getPassword();

        for (int i = 0; i < chrPass.length; i++) {
            strPass += chrPass[i];
        }
        try {
            cb = new ConexionBase(arcConfig);
            entrar = true;
        } catch (UnsupportedOperationException ux) {
            String ms = ux.getMessage();
            if (ms.equals("base")) {
                JOptionPane.showMessageDialog(this, "Error Grave -> No se puede iniciar el Sistema:\n\n NO ES POSIBLE ACCEDER AL SERVIDOR DE BASE DE DATOS... \n\n NOMBRE DE LA BASE DATOS: " + arcConfig.getProperty("base"), "Error...", 0);
                System.err.println("Error al ACCEDER AL SERVIDOR de la base de Datos: " + arcConfig.getProperty("base") + " --> " + ux);
            } else if (ms.equals("servidor")) {
                JOptionPane.showMessageDialog(this, "Error Grave -> No se puede iniciar el Sistema:\n\n NO ES POSIBLE ABRIR O INGRESAR A LA BASE DE DATOS ESPECIFICADA... \n\n NOMBRE DE LA BASE DATOS: " + arcConfig.getProperty("base"), "Error...", 0);
                System.err.println("Error al tratar de abrir la base de Datos: " + arcConfig.getProperty("base") + " --> " + ux);
            }
            UIConfiguracion config = new UIConfiguracion(url_config);
            this.dispose();
        }
        if (entrar) {
            try {
                String sql = "SELECT ID_EMPRESA,USUARIO,CLAVE,NOMBRE_USUARIO FROM USUARIOS WHERE USUARIO = '" + strUser + "' AND CLAVE = '" + strPass + "'";

                rs = cb.ejecutarConsultaUnDato(sql);

                String usuarioBase = rs.getString("USUARIO");
                String claveBase = rs.getString("CLAVE");

                boolean boolUsuario = (usuarioBase.toUpperCase().equals(strUser.toUpperCase()));
                boolean boolClave = (claveBase.toUpperCase().equals(strPass.toUpperCase()));

                if (boolUsuario) {
                    if (boolClave) {
                        /**
                         * Sesion -> usuario,id_empresa,Nombre_del_Usuario
                         * Arreglo de 3 datos en el orden que se muestra
                         */
                        String sesion[] = {strUser, rs.getString("ID_EMPRESA"), rs.getString("NOMBRE_USUARIO")};

                        //Principal pantalla = new Principal(sesion, cb);
                        Principal pantalla = new Principal(sesion, cb, arcConfig);

                        //his.setVisible(false);
                        System.out.println("Ingresar a Principal");
                        this.dispose();
                    } else {
                        JOptionPane.showMessageDialog(this, "Clave incorrecta", "Error", 0);
                        jpPass.setFocusCycleRoot(true);
                        jpPass.setText("");
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Usuario incorrecto", "Error", 0);
                    jtUser.setFocusCycleRoot(true);
                    jtUser.setText("");
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Comprobar si el usuario y la clave son correctos...", "Error", 0);
                jpPass.setFocusCycleRoot(true);
            } catch (NullPointerException npe) {
                JOptionPane.showMessageDialog(this, "No hay acceso a la base de datos, comprobar si la clave de la base de datos es corercta en el archivo de configuración...", "Error", 0);
                System.exit(0);
            }
        }
    }

    /**
     * Creacion del directorio de imagenes para conductores y vehiculos
     */
    private void existenDirectorios() {
        File jar = new File(System.getProperty("java.class.path"));
        String srcDirProyecto = jar.getPath().substring(0, jar.getPath().length() - jar.getName().length());
        System.out.println("DirFuente: "+srcDirProyecto);
        try {
            String con = arcConfig.getProperty("dirImgConductores");
            if (con != null) {
                File dirConductores = new File(srcDirProyecto + con);
                System.out.println("Dir: " + srcDirProyecto + con);
                if (!dirConductores.exists()) {
                    dirConductores.mkdir();
                    System.out.println("Creado Directorio: " + con);
                } else {
                    System.out.println("Directorio: " + con + " ya existe...");
                }

            }

            String veh = arcConfig.getProperty("dirImgVehiculos");
            if (veh != null) {
                File dirVehiculos = new File(srcDirProyecto + veh);
                System.out.println("Dir: " + srcDirProyecto + veh);
                if (!dirVehiculos.exists()) {
                    dirVehiculos.mkdir();
                    System.out.println("Creado Directorio: " + veh);
                } else {
                    System.out.println("Directorio: " + veh + " ya existe...");
                }
            }
        } catch (NullPointerException ex) {
        }
    }

    private void jpPassKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jpPassKeyPressed
        int cod = evt.getKeyCode();
        if (cod == 10) {
            ingresar();
        } else if (cod == 27) {
            System.exit(0);
        }
    }//GEN-LAST:event_jpPassKeyPressed

    private void jpPassFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jpPassFocusGained
        jpPass.setText("");
    }//GEN-LAST:event_jpPassFocusGained

    private void jtUserKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtUserKeyPressed
        int cod = evt.getKeyCode();
        if (cod == 10) {
            ingresar();
        } else if (cod == 27) {
            System.exit(0);
        }
    }//GEN-LAST:event_jtUserKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                try {
                    /**
                     * TODO: con el estilo no funciona el redibujado de la tabla
                     * vehiculos -=revisar=-
                     * Problema ocurre cuando se cambia de turnos dinamicamente
                     */
//                    UIManager.setLookAndFeel("org.pushingpixels.substance.api.skin.SubstanceOfficeBlue2007LookAndFeel");
//                    UIManager.setLookAndFeel("org.pushingpixels.substance.api.skin.SubstanceDustLookAndFeel");
//                    UIManager.setLookAndFeel("org.pushingpixels.substance.api.skin.SubstanceMistSilverLookAndFeel");
                    UIManager.setLookAndFeel("org.pushingpixels.substance.api.skin.SubstanceNebulaBrickWallLookAndFeel");
//                    UIManager.setLookAndFeel("org.pushingpixels.substance.api.skin.SubstanceSaharaLookAndFeel");

                } catch (Exception e) {
                    System.out.println("Problemas al cargar Temas Substance");
                }

                new LoginGUI().setVisible(true);



            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jbtIngresar;
    private javax.swing.JPasswordField jpPass;
    private javax.swing.JTextField jtUser;
    // End of variables declaration//GEN-END:variables
}
